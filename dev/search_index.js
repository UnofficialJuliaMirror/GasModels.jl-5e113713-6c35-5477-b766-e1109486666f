var documenterSearchIndex = {"docs":
[{"location":"math-model/#The-GasModels-Mathematical-Model-1","page":"Mathematical Model","title":"The GasModels Mathematical Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"As GasModels implements a variety of gas network optimization problems, the implementation is the best reference for precise mathematical formulations.  This section provides a mathematical specification for a prototypical Gas Flow problem, to provide an overview of the typical mathematical models in GasModels.","category":"page"},{"location":"math-model/#Gas-Flow-1","page":"Mathematical Model","title":"Gas Flow","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"GasModels implements a steady-state model of gas flow based on the Weymouth formulation that uses the 1-D hydrodynamic equations for natural gas flow in a pipe. In the following paragraphs, a derivation of the steady state equations used in GasModels is shown. To that end, we first assume that the flow is steady. Given this assumption, the conservation of momentum equation for the flow of gas in a pipe is given by","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"p fracpartial ppartial x = -fraclambda a^2 phi phi2 D","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where p is pressure, lambda is a non dimensional friction factor, phi is mass flux, and D is the diameter of the pipe. Here, a^2=fracZRTm where Z is the gas compressibility factor, R is the universal gas constant, m is the molar mass of the gas, and T is the gas temperature. Again, for steady flow, the mass conservation reduces to:","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"    fracpartial phipartial x=0","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where we have assumed the pipe area does not change with x. We also assume that gas pressure and gas density (rho) satisfy the equation of state, i.e. p = a^2 rho","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"Given that p fracpartial ppartial x= frac12 fracpartial p^2partial x and phi is a constant througout the pipe (from the mass conservation), the conservation of momentum equation is integrated from the start of the pipe at x=0 to the end of the pipe at x=L, where L is the length of the pipe. Then, the equation for flux across the pipe is stated as","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"    p^2(L)-p^2(0) = frac-lambda L a^2 phi phi D ","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"We typically express the mass flux through the pipe in terms of mass flow, f, where f=phi A. Here, A=fracpi D^24 is the cross-sectional area of the pipe. Thus, the equation for mass flow through the pipe is stated as","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"    p^2(L)-p^2(0) = frac-lambda L a^2 f f D A^2","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"To create a better numerically conditioned problem, it is very useful to non-dimensionalize the units. Here we use a typical pressure p_0 and a typical mass flow f_0 and normalize the equations. This yields","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"    tildep^2(L)-tildep^2(0) = -tildef tildef left(fraclambda L Dright) left(fracf_0^2a^2A^2p_0^2right)","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where tildef=fracff_0 and tildep=fracpp_0 are the dimensionless mass flow and pressure, respectively, and are both of order one. Note that both terms in parenthesis on the right hand side of this equation are dimensionless.  For the purposes of convenience, we define resistance, w, as the constant","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"w=left(fraclambda L Dright) left(fracf_0^2a^2A^2p_0^2right)","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"Finally, in most data sets, nodal injections and withdrawals are defined in terms of volumetric flow, q, at a STP conditions. Given this data, we non-dimensionalize based on q. At STP conditions, the mass flow is derived as f=fracqrho_s, where  rho_s is the gas density at STP conditions.","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"A complete gas flow mathematical model is the defined by","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"beginaligned\ntextsets \n N  textjunctions \n A^p  textpipes  \n A^c  textcompressors  \n A^v  textvalves  \n A = A^p cup A^c cup A^v  textedges   \n P P_i  textproducers and producers at junction i   \n C C_i  textconsumers and consumers at junction i    \n\ntextdata \n w_a  textresistance factor of pipeline a \n fl_j  textconsumption (mass flow) at consumer j \n fg_j  textproduction (mass flow) at producer j \n underlinealpha_a=1 overlinealpha_a  text(de)compression limits (squared) of edge a \n underlinep_i ge 0overlinep_i  textlimits on pressure squared at node i \n\ntextvariables \n p_i  textpressure squared at node i \n f_a  textmass flow on edge a \n alpha_a  textcompression ratio on compressor a\n v_a  textvalve status for valve a 1 if valve is open\n\ntextconstraints \n (p_i - p_j) = w_a f_af_a textWeymouth equation for pipe a \n textconnected from junction i to junction j  \nsumlimits_a=a_ijin A f_a - sumlimits_a=a_ji in A f_a = sum_j in P_i fg_j- sum_j in C_i fl_j  textmass flow balance at junction i \n alpha_a p_i = p_j  textcompression boost at compressor a \ntextmass flux balance at junction i \n f_a (1-alpha_a) le 0 textcompression ratio is forced to 1 \n textwhen flow is reversed through compressor a \nunderlinep_i leq p_i leq overlinep_i  textpressure limits at junction i \nunderlinealpha_a leq alpha_a leq overlinealpha_a  textcompression limits at compressor i \n-v_a M leq f_a leq v_a M  textonoff operations for valve a \n textwhere M is the maximum flow through the valve \np_j - v_a overlinep_j leq p_i leq p_j + v_a overlinep_i  textlinks junction pressures of valve a \n textconnected from junction i to junction j\nendaligned","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"most of the optimization models of GasModels are variations of this formulation. In practice, we discretize on flow direction to reduce the non convexities of this model and relax the assumption that the minimum compression ratio is 1.","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"SI Units for various parameters","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"Parameter Description SI Units\nD Pipe Diameter m\nL Pipe Length m\nA Pipe Area Cross Section m^2\np Gas Pressure pascals\nrho Gas Density kg/m^3\nZ Gas compressibility factor none\nm Gas Molar Mass kg/mol\nT Gas Temperature K\nR Universal Gas Constant J/mol/K\nphi Gas Mass Flux kg/m^2/s\nf Gas Mass Flow kg/s\nlambda Pipe friction factor none","category":"page"},{"location":"network-data/#GasModels-Network-Data-Format-1","page":"Network Data Format","title":"GasModels Network Data Format","text":"","category":"section"},{"location":"network-data/#The-Network-Data-Dictionary-1","page":"Network Data Format","title":"The Network Data Dictionary","text":"","category":"section"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"Internally GasModels utilizes a dictionary to store network data. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The default I/O for GasModels utilizes this serialization as a text file. When used as serialization, the data is assumed to be in per_unit (non dimenisionalized) or SI units.","category":"page"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"The network data dictionary structure is roughly as follows:","category":"page"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"{\n\"name\":<string>,                   # a name for the model\n\"temperature\":<float>,             # gas temperature. SI units are kelvin\n\"multinetwork\":<boolean>,          # flag for whether or not this is multiple networks\n\"gas_molar_mass\":<float>,          # molecular mass of the gas. SI units are kg/mol\n\"standard_density\":<float>,        # Standard (nominal) density of the gas. SI units are kg/m^3\n\"per_unit\":<boolean>,              # Whether or not the file is in per unit (non dimensional units) or SI units.  Note that the only quantities that are non-dimensionalized are pressure and flux.  \n\"compressibility_factor\":<float>,  # Gas compressability. Non-dimensional.\n\"baseQ\":<float>,                   # Base for non-dimensionalizing volumetric flow at standard density. SI units are m^3/s\n\"baseP\":<float>,                   # Base for non-dimensionalizing pressure. SI units are pascal.\n\"junction\":{\n    \"1\":{\n      \"pmax\": <float>,    # maximum pressure. SI units are pascals\n      \"pmin\": <float>,    # minimum pressure. SI units are pascals\n      \"status\": <int>,    # status of the component (0 = off, 1 = on). Default is 1.\n      \"latitude\":<float>, # latitude position of the junction (optional)\n      \"longitude\":<float>, # latitude position of the junction (optional)\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"consumer\":{\n    \"1\":{\n      \"ql_junc\": <float>,  # junction id\n      \"qlmax\": <float>,  # the maximum volumetric gas demand at standard density. SI units are m^3/s.\n      \"qlmin\": <float>,  # the minimum volumetric gas demand gas demand at standard density. SI units are m^3/s.\n      \"ql\": <float>, # nominal volumetric gas demand gas demand at standard density. SI units are m^3/s.\n      \"priority\": <float>, # priority for serving the variable load. High numbers reflect a higher desired to serve this load.\n      \"dispatchable\": <int>,  # whether or not the unit is dispatchable (0 = consumer should produce qg, 1 = consumer can produce between qlmin and qlmax).\n      \"status\": <int>,   # status of the component (0 = off, 1 = on). Default is 1.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"producer\":{\n    \"1\":{\n      \"qg_junc\": <float>,     # junction id\n      \"qgmin\": <float>,       # the minimum volumetric gas production at standard density. SI units are m^3/s.\n      \"qgmax\": <float>,       # the maximum volumetric gas production at standard density. SI units are m^3/s.\n      \"qg\": <float>,          # nominal volumetric gas production at standard density. SI units are m^3/s.\n      \"dispatchable\": <int>,  # whether or not the unit is dispatchable (0 = producer should produce qg, 1 = producer can produce between qgmin and qgmax).\n      \"status\": <int>,        # status of the component (0 = off, 1 = on). Default is 1.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"pipe\":{\n    \"1\":{\n      \"length\": <float>,            # the length of the connection. SI units are m.\n      \"f_junction\": <int>,          # the \"from\" side junction id\n      \"t_junction\": <int>,          # the \"to\" side junction id\n      \"friction_factor\": <float>,   # the friction component of the resistance term of the pipe. Non dimensional.\n      \"diameter\": <float>,          # the diameter of the connection. SI units are m.\n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"directed\": <int>,            # direction of the component (1 = f_junction -> t_junction, 0 = undirected, -1 = t_junction -> f_junction). Default is 0.\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"compressor\":{\n    \"1\":{\n      \"f_junction\": <int>,          # the \"from\" side junction id\n      \"t_junction\": <int>,          # the \"to\" side junction id\n      \"c_ratio_min\": <float>,       # minimum multiplicative pressure change (compression or decompressions). Compression only goes from f_junction to t_junction (1 if flow reverses).\n      \"c_ratio_max\": <float>,       # maximum multiplicative pressure change (compression or decompressions). Compression only goes from f_junction to t_junction (1 if flow reverses).      \n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"directed\": <int>,            # direction of the component (1 = f_junction -> t_junction, 0 = undirected, -1 = t_junction -> f_junction). Default is 0.\n        ...\n    },\n    \"2\":{...},\n    ...\n}\n\"short_pipe\":{\n    \"1\":{\n      \"f_junction\": <int>,          # the \"from\" side junction id\n      \"t_junction\": <int>,          # the \"to\" side junction id\n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"directed\": <int>,            # direction of the component (1 = f_junction -> t_junction, 0 = undirected, -1 = t_junction -> f_junction). Default is 0.\n        ...\n    },\n    \"2\":{...},\n    ...\n}\n\"valve\":{\n    \"1\":{\n      \"f_junction\": <int>,          # the \"from\" side junction id\n      \"t_junction\": <int>,          # the \"to\" side junction id\n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"directed\": <int>,            # direction of the component (1 = f_junction -> t_junction, 0 = undirected, -1 = t_junction -> f_junction). Default is 0.\n        ...\n    },\n    \"2\":{...},\n    ...\n}\n\"control_valve\":{\n    \"1\":{\n      \"f_junction\": <int>,          # the \"from\" side junction id\n      \"c_ratio_min\": <float>,       # minimum multiplicative pressure change (compression or decompressions). Compression only goes from f_junction to t_junction (1 if flow reverses).\n      \"c_ratio_max\": <float>,       # maximum multiplicative pressure change (compression or decompressions). Compression only goes from f_junction to t_junction (1 if flow reverses).      \n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"directed\": <int>,            # direction of the component (1 = f_junction -> t_junction, 0 = undirected, -1 = t_junction -> f_junction). Default is 0.\n        ...\n    },\n    \"2\":{...},\n    ...\n}\n\"resistor\":{\n    \"1\":{\n      \"f_junction\": <int>,          # the \"from\" side junction id\n      \"t_junction\": <int>,          # the \"to\" side junction id\n      \"drag\": <float>,              # the drag factor of resistors. Non dimensional.\n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"directed\": <int>,            # direction of the component (1 = f_junction -> t_junction, 0 = undirected, -1 = t_junction -> f_junction). Default is 0.\n        ...\n    },\n    \"2\":{...},\n    ...\n}\n}","category":"page"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"All data is assumed to have consistent units (i.e. SI units or non-dimensionalized units)","category":"page"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"The following commands can be used to explore the network data dictionary,","category":"page"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"network_data = GasModels.parse_file(\"gaslib-40.m\")\ndisplay(network_data)","category":"page"},{"location":"developer/#Developer-Documentation-1","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/#Variable,-constraint-and-parameter-naming-scheme-1","page":"Developer","title":"Variable, constraint and parameter naming scheme","text":"","category":"section"},{"location":"developer/#Suffixes-1","page":"Developer","title":"Suffixes","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"_ne: used to denote a concept specific to network expansion problems\n_directed: used to denote a concept specific to implementations where direction of flow is pre-determined.\n_ls: used to denote a concept specific to implementations where production and consumption are variables.\n_on_off: used to denote a concept where there are either-or choices, such is valve operations or binary direction choices.","category":"page"},{"location":"developer/#Pressure-1","page":"Developer","title":"Pressure","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"p: pressure squared\npd_min: minimum pressure squared difference (computed value)\npd_max: maximum pressure squared difference (computed value)","category":"page"},{"location":"developer/#Flow-1","page":"Developer","title":"Flow","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"f: mass flow\nfl: mass flow consumption\nfg: mass flow production","category":"page"},{"location":"parser/#File-IO-1","page":"File IO","title":"File IO","text":"","category":"section"},{"location":"parser/#","page":"File IO","title":"File IO","text":"CurrentModule = GasModels","category":"page"},{"location":"parser/#General-Data-Formats-1","page":"File IO","title":"General Data Formats","text":"","category":"section"},{"location":"parser/#","page":"File IO","title":"File IO","text":"The json file format is a direct JSON serialization of GasModels internal data model. As such, the json file format is intended to be a temporary storage format. GasModels does not maintain backwards compatability with serializations of earlier versions of the Gas Models internal data model.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"parse_file\nparse_json","category":"page"},{"location":"parser/#Matlab-Data-Files-1","page":"File IO","title":"Matlab Data Files","text":"","category":"section"},{"location":"parser/#","page":"File IO","title":"File IO","text":"The following method is the main exported methods for parsing Matlab data files:","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"parse_matpower","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"We also provide the following (internal) helper methods:","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Modules = [GasModels]\nPages   = [\"io/matpower.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"This format was designed to have a similar look a feel to the matlab MatPower format, however, it standardizes around data requirements developed by the GasModels development team. It is largely stable, though it has not yet standardized the data fields for valves, control valves, short pipes, resistors, and storage.  Such data can be incorporated using the matlab extensions developed in InfrastructureModels.jl, with standard formats expected to be introduced at a later date.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"The top of the file contains global information about the network like its name, gas temperature, etc.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"function mgc = gaslib40                       % Name of the network model\n\nmgc.sound_speed = 312.805;                    % Speed of sound\nmgc.temperature = 273.15;                     % Gas temperature\nmgc.R = 8.314;                                % Universal gas constant\nmgc.compressibility_factor = 0.8;             % Gas compressibility factor\nmgc.gas_molar_mass = 0.0185674;               % Molar mass of the gas\nmgc.gas_specific_gravity = 0.6;               % Specific gravity of the gas\nmgc.specific_heat_capacity_ratio = 1.4;       % Heat capacity ratio of the gas\nmgc.standard_density = 1.0;                   % Standard density value\nmgc.baseP = 8101325;                          % Normalization constant for pressure\nmgc.baseF = 604.167;                          % Normalization constant for flow\nmgc.per_unit = true;                          % Whether or not the parameters are in per unit","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Junction data is defined with the following tabular format","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"%% junction data\n%  junction_i type pmin pmax status p\nmgc.junction = [\n...\n]","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"where junction_i is the unique identifier of the junction, type indicates whether or not the junction can be used as a slack node ('type=1'), pmin is the minimum pressure, pmax is the maximum pressure, status is the 0/1 status of the junction and p is a nominal pressure value.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Pipeline data is defined with the following tabular format","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"%% pipeline data\n% pipeline_i f_junction t_junction diameter length friction_factor status\nmgc.pipe = [\n...\n]","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"where pipeline_i is the unique identifier of the pipe, f_junction is the identifier of the from junction, t_junction is the identifier of the to junction, diameter is the diameter of the pipe, length is the length of the pipe, friction_factor is the friction level of the pipe, and status is the 0/1 status of the pipe.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Compressor data is defined with the following tabular format","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"%% compressor data\n% compressor_i f_junction t_junction cmin cmax power_max fmin fmax status\nmgc.compressor = [\n...","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"where compressor_i is the unique identifier of the compressor, f_junction is the identifier of the from junction, t_junction is the identifier of the to junction, cmin is the minimum boost ratio of the compressor, cmax is the maximum boost ratio of the compressor, power_max is the maximum power for the compressor, fmin is the minimum flow through the compressor, fmax is the minimum flow through the compressor, and status is the 0/1 status of the pipe.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Producer data is defined with the following tabular format","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"%% producer\n% producer_i junction fgmin fgmax fg status dispatchable\nmgc.producer = [\n...","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"where producer_i is the unique identifier of the producer, junction is the identifier of the junction, fgmin is the minimum production, fgmax is the maximum production, fg is the normal production, status is the 0/1 status of the pipe, and dispatchable indicates whether or not the producer can modify its production.","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Consumer data is defined with the following tabular format","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"%% consumer\n% consumer_i junction fd status dispatchable\nmgc.consumer = [\n...","category":"page"},{"location":"parser/#","page":"File IO","title":"File IO","text":"where consumer_i is the unique identifier of the consumer, junction is the identifier of the junction, fd is the normal consumption, status is the 0/1 status of the pipe, and dispatchable indicates whether or not the producer can modify its production.","category":"page"},{"location":"quickguide/#Quick-Start-Guide-1","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Once Gas Models is installed, Juniper is installed, and a network data file (e.g. \"test/data/gaslib-40.m\") has been acquired, a Gas Flow with the second order cone (SOC) relaxation can be executed with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"using GasModels\nusing Juniper\nusing Ipopt\nusing Cbc\nusing JuMP\n\nipopt_solver = JuMP.with_optimizer(Ipopt.Optimizer)\ncbc_solver = JuMP.with_optimizer(Cbc.Optimizer)\njuniper_solver = JuMP.with_optimizer(Juniper.Optimizer, nl_solver=ipopt_solver, mip_solver=cbc_solver)\nGasModels.run_soc_gf(\"test/data/gaslib-40.m\", juniper_solver)","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Similarly, a full non-convex Gas Flow can be executed with an MINLP solver like","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"using GasModels\nusing AmplNLWriter\nusing JuMP\n\ncouenne_solver = JuMP.with_optimizer(AmplNLWriter.Optimizer, \"path/to/couenne\")\nGasModels.run_minl_gf(\"test/data/gaslib-40.m\", couenne_solver)","category":"page"},{"location":"quickguide/#Getting-Results-1","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The run commands in GasModels return detailed results data in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"result = GasModels.run_soc_gf(\"test/data/gaslib-40.m\", juniper_solver)","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime, final objective value, and status can be accessed with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"]\nresult[\"objective\"]\nresult[\"status\"]","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the run method. For example, the following dictionary comprehension can be used to inspect the junction pressures in the solution,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Dict(name => data[\"p\"] for (name, data) in result[\"solution\"][\"junction\"])","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"For more information about GasModels result data see the GasModels Result Data Format section.","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations-1","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The function run_soc_gf and run_minl_gf are shorthands for a more general formulation-independent gas flow execution, run_gf. For example, run_soc_gf is equivalent to,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"run_gf(\"test/data/gaslib-40.m\", MISOCPGasModel, juniper_solver)","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"where \"MISOCPGasModel\" indicates an SOC formulation of the gas flow equations.  This more generic run_gf() allows one to solve a gas flow feasability problem with any gas network formulation implemented in GasModels.  For example, the full non convex Gas Flow can be run with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"run_gf(\"test/data/gaslib-40.m\", MINLPGasModel, couenne_solver)","category":"page"},{"location":"quickguide/#Modifying-Network-Data-1","page":"Getting Started","title":"Modifying Network Data","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates one way to perform multiple GasModels solves while modify the network data in Julia,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"network_data = GasModels.parse_file(\"test/data/gaslib-40.m\")\n\nrun_gf(network_data, MISOCPGasModel, juniper_solver)\n\nnetwork_data[\"junction\"][\"24\"][\"pmin\"] = 0.0\n\nrun_gf(network_data, MISOCPGasModel, juniper_solver)","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"For additional details about the network data, see the GasModels Network Data Format section.","category":"page"},{"location":"quickguide/#Inspecting-the-Formulation-1","page":"Getting Started","title":"Inspecting the Formulation","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a run_gf call into separate model building and solving steps.  This allows inspection of the JuMP model created by GasModels for the gas flow problem,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"gm = build_generic_model(\"test/data/gaslib-40.m\", MISOCPGasModel, GasModels.post_gf)\n\nprint(gm.model)\n\nsolve_generic_model(gm, juniper_solver)","category":"page"},{"location":"quickguide/#Solution-conversion-1","page":"Getting Started","title":"Solution conversion","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The default behavior of GasModels produces solution results in non-dimensionalized units. To recover solutions in SI units, the following function can be used","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"GasModels.make_si_unit!(result[\"solution\"])","category":"page"},{"location":"constraints/#Constraints-1","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"CurrentModule = GasModels","category":"page"},{"location":"constraints/#Constraint-Templates-1","page":"Constraints","title":"Constraint Templates","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"Constraint templates help simplify data wrangling across multiple Gas Flow formulations by providing an abstraction layer between the network data and network constraint definitions. The constraint template's job is to extract the required parameters from a given network data structure and pass the data as named arguments to the Gas Flow formulations.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"These templates should be defined over GenericGasModel and should not refer to model variables. For more details, see the files: core/constraint_template.jl and core/constraint.jl.","category":"page"},{"location":"constraints/#Junction-Constraints-1","page":"Constraints","title":"Junction Constraints","text":"","category":"section"},{"location":"constraints/#Flow-balance-constraints-1","page":"Constraints","title":"Flow balance constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The primary constraints related to junctions ensure that mass flow is balanced at these nodes. The specifics of the constraint implementation will change if there are variable or constant injections (variable injections are denoted by ls in the name of the function) and if there are network design options (denoted by \\_ne in the name of the function).","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_mass_flow_balance\nconstraint_mass_flow_balance_ls\nconstraint_mass_flow_balance_ne\nconstraint_mass_flow_balance_ne_ls","category":"page"},{"location":"constraints/#GasModels.constraint_mass_flow_balance","page":"Constraints","title":"GasModels.constraint_mass_flow_balance","text":"Constraint: standard mass flow balance equation where demand and production are constants \n\n\n\n\n\nTemplate: Constraints for mass flow balance equation where demand and production are constants\n\n\n\n\n\nConstraint: standard mass flow balance equation where demand and production are constants \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_mass_flow_balance_ls","page":"Constraints","title":"GasModels.constraint_mass_flow_balance_ls","text":"Constraint: standard flow balance equation where demand and production are variables \n\n\n\n\n\nTemplate: Constraints for mass flow balance equation where demand and production is are a mix of constants and variables\n\n\n\n\n\nConstraint: standard flow balance equation where demand and production are variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_mass_flow_balance_ne","page":"Constraints","title":"GasModels.constraint_mass_flow_balance_ne","text":"Constraint: standard flow balance equation where demand and production are constants and there are expansion connections\n\n\n\n\n\nTemplate: Constraints for mass flow balance equation where demand and production are constants and there are expansion connections \n\n\n\n\n\nConstraint: standard flow balance equation where demand and production are constants and there are expansion connections\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_mass_flow_balance_ne_ls","page":"Constraints","title":"GasModels.constraint_mass_flow_balance_ne_ls","text":"Constraint: standard flow balance equation where demand and production are variables and there are expansion connections\n\n\n\n\n\nTemplate: Constraints for mass flow balance equation where demand and production is are a mix of constants and variables and there are expansion connections\n\n\n\n\n\nConstraint: standard flow balance equation where demand and production are variables and there are expansion connections\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Direction-On/off-Constraints-1","page":"Constraints","title":"Direction On/off Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The disjunctive forms of problems (where directions are controlled by on/off variables) include special (redundant) constraints which tie the direction variables together.  Examples include ensuring that ensure at least one edge of junction that has only sources of natural gas has outgoing flow.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_source_flow\nconstraint_sink_flow\nconstraint_conserve_flow\nconstraint_source_flow_ne\nconstraint_sink_flow_ne\nconstraint_conserve_flow_ne","category":"page"},{"location":"constraints/#GasModels.constraint_source_flow","page":"Constraints","title":"GasModels.constraint_source_flow","text":"Constraint: Make sure there is at least one direction set to take flow away from a junction (typically used on source nodes) \n\n\n\n\n\nTemplate: Constraints for ensuring that at least one direction is set to take flow away from a junction (typically used on source nodes) \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_sink_flow","page":"Constraints","title":"GasModels.constraint_sink_flow","text":"Constraint: Make sure there is at least one direction set to take flow to a junction (typically used on sink nodes) \n\n\n\n\n\nTemplate: Constraints for ensuring that at least one direction is set to take flow away from a junction (typically used on sink nodes) \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_conserve_flow","page":"Constraints","title":"GasModels.constraint_conserve_flow","text":"Constraint: This constraint is intended to ensure that flow is one direction through a node with degree 2 and no production or consumption \n\n\n\n\n\nTemplate: Constraints to ensure that flow is the same direction through a node with degree 2 and no production or consumption \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_source_flow_ne","page":"Constraints","title":"GasModels.constraint_source_flow_ne","text":"Constraint: Make sure there is at least one direction set to take flow away from a junction (typically used on source nodes) \n\n\n\n\n\nTemplate: Constraints for ensuring that at least one direction is set to take flow away from a junction (typically used on source nodes) \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_sink_flow_ne","page":"Constraints","title":"GasModels.constraint_sink_flow_ne","text":"Constraint: Make sure there is at least one direction set to take flow to a junction (typically used on sink nodes) \n\n\n\n\n\nTemplate: Constraints for ensuring that at least one direction is set to take flow away from a junction (typically used on sink nodes) \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_conserve_flow_ne","page":"Constraints","title":"GasModels.constraint_conserve_flow_ne","text":"Constraint: This constraint is intended to ensure that flow is on direction through a node with degree 2 and no production or consumption for a node with expansion edges\n\n\n\n\n\nTemplate: Constraints to ensure that flow is the same direction through a node with degree 2 and no production or consumption \n\n\n\n\n\n","category":"function"},{"location":"constraints/#Pipe-Constraints-1","page":"Constraints","title":"Pipe Constraints","text":"","category":"section"},{"location":"constraints/#Weymouth's-law-constraints-1","page":"Constraints","title":"Weymouth's law constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The primary constraints related to pipes ensure that that pressure drop and flow across a pipe is related through the Weymouth relationships. Here, the naming convention ne is used to denote the form of the constraint used for expansion pipes and directed is used to denote the form of the constraint used when the direction of flow is constrained.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_weymouth\nconstraint_weymouth_ne\nconstraint_weymouth_directed\nconstraint_weymouth_ne_directed","category":"page"},{"location":"constraints/#GasModels.constraint_weymouth","page":"Constraints","title":"GasModels.constraint_weymouth","text":"Template: Weymouth equation for defining the relationship between pressure drop and flow across a pipe \n\n\n\n\n\nConstraint: Weymouth equation–not applicable for MIP models\n\n\n\n\n\nConstraint: Weymouth equation–not applicable for LP models\n\n\n\n\n\nWeymouth equation with absolute value \n\n\n\n\n\nWeymouth equation with discrete direction variables \n\n\n\n\n\nWeymouth equation for an undirected pipe \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_weymouth_ne","page":"Constraints","title":"GasModels.constraint_weymouth_ne","text":"Template: Weymouth equation for expansion pipes \n\n\n\n\n\nConstraint: Weymouth equation–not applicable for MIP models–not applicable for MIP models\n\n\n\n\n\nConstraint: Weymouth equation–not applicable for MIP models–not applicable for LP models\n\n\n\n\n\nWeymouth equation for an undirected expansion pipe \n\n\n\n\n\nWeymouth equation for an undirected expansion pipe \n\n\n\n\n\nWeymouth equation for an undirected expansion pipe\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_weymouth_directed","page":"Constraints","title":"GasModels.constraint_weymouth_directed","text":"Template: Weymouth equation for defining the relationship between pressure drop and flow across a pipe where flow is constrained in one direction\n\n\n\n\n\nConstraint: Weymouth equation with one way direction–not applicable for MIP models\n\n\n\n\n\nConstraint: Weymouth equation with one way direction–not applicable for LP models\n\n\n\n\n\nWeymouth equation with one way direction\n\n\n\n\n\nWeymouth equation with one way direction\n\n\n\n\n\nWeymouth equation with a pipe with one way flow\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_weymouth_ne_directed","page":"Constraints","title":"GasModels.constraint_weymouth_ne_directed","text":"Template: Weymouth equation for expansion pipes where flow is restricted to one direction \n\n\n\n\n\nConstraint: Weymouth equation–not applicable for MIP models–not applicable for MIP models\n\n\n\n\n\nConstraint: Weymouth equation–not applicable for MIP models–not applicable for LP models\n\n\n\n\n\nWeymouth equation for directed expansion pipes\n\n\n\n\n\nWeymouth equation for directed expansion pipes\n\n\n\n\n\nWeymouth equation for expansion pipes with undirected expansion pipes\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Mass-flow-and-pressure-drop-constraints-1","page":"Constraints","title":"Mass flow and pressure drop constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"Secondarily, there are constraints associated with limits on pressure drop or mass flow across pipes. These constraints also use the ne and directed naming conventions.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_pipe_mass_flow\nconstraint_pipe_pressure","category":"page"},{"location":"constraints/#GasModels.constraint_pipe_mass_flow","page":"Constraints","title":"GasModels.constraint_pipe_mass_flow","text":"Constraint: Constraint on mass flow across the pipe\n\n\n\n\n\nTemplate: Constraint on mass flow across a pipe\n\n\n\n\n\nConstraint: Constraint on flow across a pipe when there are on/off direction variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_pipe_pressure","page":"Constraints","title":"GasModels.constraint_pipe_pressure","text":"Constraint: Constraints which define pressure drop across a pipe \n\n\n\n\n\nTemplate: Pressure drop across pipes with on/off direction variables\n\n\n\n\n\nConstraint: Constraints which define pressure drop across a pipe \n\n\n\n\n\nConstraint: Constraints which define pressure drop across a pipe \n\n\n\n\n\nConstraint: Constraints which define pressure drop across a pipe when there are on/off direction variables\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Network-expansion-constraints-1","page":"Constraints","title":"Network expansion constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"These constraints turn on or off the association between pressure and flow for pipes desiginated as expansion options.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_pipe_ne","category":"page"},{"location":"constraints/#GasModels.constraint_pipe_ne","page":"Constraints","title":"GasModels.constraint_pipe_ne","text":"Constraint: on/off constraints on flow across pipes for expansion pipes \n\n\n\n\n\nTemplate: Constraint associatd with turning off flow depending on the status of expansion pipes\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Direction-on/off-constraints-1","page":"Constraints","title":"Direction on/off constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The disjunctive forms of problems (where directions are controlled by on/off variables) include special (redundant) constraints which tie the direction variables together.  Examples include ensuring that ensuring that parallel pipes have flow in the same direction.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_flow_direction_choice\nconstraint_parallel_flow\nconstraint_parallel_flow_ne","category":"page"},{"location":"constraints/#GasModels.constraint_flow_direction_choice","page":"Constraints","title":"GasModels.constraint_flow_direction_choice","text":"Constraint: Constraints which state a flow direction must be chosen \n\n\n\n\n\nConstraint: Choose one direction\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_parallel_flow","page":"Constraints","title":"GasModels.constraint_parallel_flow","text":"Constraint: ensures that parallel lines have flow in the same direction \n\n\n\n\n\nTemplate: Constraints which ensure that parallel lines have flow in the same direction \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_parallel_flow_ne","page":"Constraints","title":"GasModels.constraint_parallel_flow_ne","text":"Constraint: ensures that parallel lines have flow in the same direction \n\n\n\n\n\nTemplate: Constraints which ensure that parallel lines have flow in the same direction \n\n\n\n\n\n","category":"function"},{"location":"constraints/#Compressor-Constraints-1","page":"Constraints","title":"Compressor Constraints","text":"","category":"section"},{"location":"constraints/#Operations-Constraints-1","page":"Constraints","title":"Operations Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The primary constraints related to compressors ensure that that the compressors operate within the limits of their capability (boost ratio, energy consumption, etc.). These constraints use the ne and directed naming conventions to denote constraints where the compressor is an expansion option or direction of flow is fixed, respectively.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_compressor_ratios\nconstraint_compressor_ratios_directed\nconstraint_compressor_ratios_ne\nconstraint_compressor_ratios_ne_directed\nconstraint_compressor_mass_flow","category":"page"},{"location":"constraints/#GasModels.constraint_compressor_ratios","page":"Constraints","title":"GasModels.constraint_compressor_ratios","text":"Template: Compression ratios for a compressor \n\n\n\n\n\nConstraint: Compressor ratio constraints on pressure differentials–not applicable for MIP models\n\n\n\n\n\nConstraint: Compressor ratio constraints on pressure differentials–not applicable for LP models\n\n\n\n\n\nenforces pressure changes bounds that obey compression ratios for an undirected compressor. \n\n\n\n\n\nConstraint: enforces pressure changes bounds that obey compression ratios for a compressor with on/off direction variables\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_compressor_ratios_directed","page":"Constraints","title":"GasModels.constraint_compressor_ratios_directed","text":"Constraint: Compressor ratio when the flow direction is constrained \n\n\n\n\n\nTemplate: Constraints on compressor ratios when flow is restricted to one direction\n\n\n\n\n\nConstraint: Compressor ratio when the flow direction is constrained–not applicable for MIP models\n\n\n\n\n\nConstraint: Compressor ratio when the flow direction is constrained–not applicable for LP models\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_compressor_ratios_ne","page":"Constraints","title":"GasModels.constraint_compressor_ratios_ne","text":"Template: constraints on pressure drop across a compressor \n\n\n\n\n\nConstraint: compressor ratios on a new compressor–not applicable for MIP models-not applicable for MIP models\n\n\n\n\n\nConstraint: compressor ratios on a new compressor–not applicable for MIP models-not applicable for LP models\n\n\n\n\n\nconstraints on pressure drop across a compressor \n\n\n\n\n\nConstraint: constraints on pressure drop across expansion compressors with on/off decision variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_compressor_ratios_ne_directed","page":"Constraints","title":"GasModels.constraint_compressor_ratios_ne_directed","text":"Constraint: Pressure drop across an expansion compressor when direction is constrained\n\n\n\n\n\nTemplate: Constraints on compressor ratios when flow is restricted to one direction and the compressor is an expanson option\n\n\n\n\n\nConstraint: Pressure drop across an expansion compressor when direction is constrained-not applicable for MIP models\n\n\n\n\n\nConstraint: Pressure drop across an expansion compressor when direction is constrained-not applicable for LP models\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_compressor_mass_flow","page":"Constraints","title":"GasModels.constraint_compressor_mass_flow","text":"Constraint: constraints on flow across a compressor with on/off direction variables \n\n\n\n\n\nTemplate: constraints on flow across a compressor\n\n\n\n\n\nConstraint: constraints on flow across a compressor with on/off direction variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#Direction-On/off-Constraints-2","page":"Constraints","title":"Direction On/off Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The disjunctive forms of problems (where directions are controlled by on/off variables) include special constraints to connect direction of flow with the choice of the binary variable.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_flow_direction_choice\nconstraint_parallel_flow\nconstraint_parallel_flow_ne","category":"page"},{"location":"constraints/#Network-Expansion-Constraints-1","page":"Constraints","title":"Network Expansion Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"Constraints are also used to turn on/off flow through a compressor in expansion planning formulations","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_compressor_ne","category":"page"},{"location":"constraints/#GasModels.constraint_compressor_ne","page":"Constraints","title":"GasModels.constraint_compressor_ne","text":"Constraint: on/off constraints on flow across compressors for expansion variables \n\n\n\n\n\nTemplate: Constraint for turning on or off flow through expansion compressor \n\n\n\n\n\n","category":"function"},{"location":"constraints/#Control-Valve-Constraints-1","page":"Constraints","title":"Control Valve Constraints","text":"","category":"section"},{"location":"constraints/#Operations-Constraints-2","page":"Constraints","title":"Operations Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The primary constraints related to control valves ensure that that the valves operate within the limits of their capability (pressure reduction). These constraints use the directed naming conventions to denote constraints where the control valve direction of flow is fixed.  The control valve also has an open/close variable to determine whether or not flow is allowed through the valve","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_on_off_control_valve_mass_flow\nconstraint_on_off_control_valve_pressure\nconstraint_on_off_control_valve_mass_flow_directed\nconstraint_on_off_control_valve_pressure_directed","category":"page"},{"location":"constraints/#GasModels.constraint_on_off_control_valve_mass_flow","page":"Constraints","title":"GasModels.constraint_on_off_control_valve_mass_flow","text":"constraints on flow across control valves that are undirected \n\n\n\n\n\nTemplate: constraints on flow across control valves with on/off direction variables \n\n\n\n\n\nConstraint: Constraints on flow across control valves with on/off direction variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_on_off_control_valve_pressure","page":"Constraints","title":"GasModels.constraint_on_off_control_valve_pressure","text":"Constraint Enforces pressure changes bounds that obey decompression ratios for \n\n\n\n\n\nconstraints on pressure drop across control valves that are undirected–not applicable for MIP models\n\n\n\n\n\nconstraints on pressure drop across control valves that are undirected–not applicable for LP models\n\n\n\n\n\nconstraints on pressure drop across control valves that are undirected \n\n\n\n\n\nConstraint: Constraints on pressure drop across control valves that have on/off direction variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_on_off_control_valve_mass_flow_directed","page":"Constraints","title":"GasModels.constraint_on_off_control_valve_mass_flow_directed","text":"Constraint: Flow across control valves when direction is constrained \n\n\n\n\n\nTemplate: Constraints on control valve flows when flow is restricted to one direction\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_on_off_control_valve_pressure_directed","page":"Constraints","title":"GasModels.constraint_on_off_control_valve_pressure_directed","text":"Constraint: Pressure drop across a control valves when directions is constrained \n\n\n\n\n\nTemplate: Constraints on control valve pressure when flow is restricted to one direction\n\n\n\n\n\nConstraint: Pressure drop across a control valves when directions is constrained–not applicable for MIP models\n\n\n\n\n\nConstraint: Pressure drop across a control valves when directions is constrained–not applicable for LP models\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Direction-On/off-Constraints-3","page":"Constraints","title":"Direction On/off Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The disjunctive forms of problems (where directions are controlled by on/off variables) include special constraints to connect direction of flow with the choice of the binary variable.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_flow_direction_choice\nconstraint_parallel_flow\nconstraint_parallel_flow_ne","category":"page"},{"location":"constraints/#Valve-Constraints-1","page":"Constraints","title":"Valve Constraints","text":"","category":"section"},{"location":"constraints/#Operations-Constraints-3","page":"Constraints","title":"Operations Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The primary function of a valve is to open or close a pipe. These constraints use the directed naming conventions to denote constraints where the valve direction of flow is fixed.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_on_off_valve_mass_flow\nconstraint_on_off_valve_pressure","category":"page"},{"location":"constraints/#GasModels.constraint_on_off_valve_mass_flow","page":"Constraints","title":"GasModels.constraint_on_off_valve_mass_flow","text":"constraints on flow across undirected valves \n\n\n\n\n\nTemplate: constraints on flow across valves modeled with on/off direction variables \n\n\n\n\n\nConstraint: Constraints on flow across valves with on/off direction variables \n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_on_off_valve_pressure","page":"Constraints","title":"GasModels.constraint_on_off_valve_pressure","text":"Constraint: Constraints on pressure drop across valves where the valve can open or close\n\n\n\n\n\nTemplate: Constraint on pressure drop across valves, where the valve may be closed or opened \n\n\n\n\n\nConstraint: Constraints on pressure drop across valves where the valve can open or close–not applicable for MIP models\n\n\n\n\n\nConstraint: Constraints on pressure drop across valves where the valve can open or close–not applicable for LP models\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Direction-On/off-Constraints-4","page":"Constraints","title":"Direction On/off Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The disjunctive forms of problems (where directions are controlled by on/off variables) include special constraints to connect direction of flow with the choice of the binary variable.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_flow_direction_choice\nconstraint_parallel_flow\nconstraint_parallel_flow_ne","category":"page"},{"location":"constraints/#Short-Pipes-1","page":"Constraints","title":"Short Pipes","text":"","category":"section"},{"location":"constraints/#Pressure-Constraints-1","page":"Constraints","title":"Pressure Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"Short pipes are used to model frictionless connections between junctions.  The primary constraint ensures the pressure on both sides of the short pipe are the same. These constraints use the directed naming conventions to denote constraints where the control valve direction of flow is fixed.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"constraint_short_pipe_pressure\nconstraint_short_pipe_mass_flow\ncconstraint_short_pipe_mass_flow_directed","category":"page"},{"location":"constraints/#GasModels.constraint_short_pipe_pressure","page":"Constraints","title":"GasModels.constraint_short_pipe_pressure","text":"Constraint: Constraint on pressure drop across a short pipe \n\n\n\n\n\nTemplate: Constraint on pressure drop across a short pipe \n\n\n\n\n\nConstraint: Constraint on pressure drop across a short pipe–not applicable for MIP models\n\n\n\n\n\nConstraint: Constraint on pressure drop across a short pipe–not applicable for LP models\n\n\n\n\n\n","category":"function"},{"location":"constraints/#GasModels.constraint_short_pipe_mass_flow","page":"Constraints","title":"GasModels.constraint_short_pipe_mass_flow","text":"Constraint: Constraints on flow across a short pipe with on/off direction variables\n\n\n\n\n\nConstraint: constraints on flow across a short pipe\n\n\n\n\n\nConstraint: Constraints on flow across a short pipe with on/off direction variables\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Direction-On/off-Constraints-5","page":"Constraints","title":"Direction On/off Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"The disjunctive forms of problems (where directions are controlled by on/off variables) include special constraints to connect direction of flow with the choice of the binary variable.","category":"page"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"\nconstraint_flow_direction_choice\nconstraint_parallel_flow\nconstraint_parallel_flow_ne","category":"page"},{"location":"model/#Gas-Model-1","page":"GasModel","title":"Gas Model","text":"","category":"section"},{"location":"model/#","page":"GasModel","title":"GasModel","text":"CurrentModule = GasModels","category":"page"},{"location":"model/#","page":"GasModel","title":"GasModel","text":"All methods for constructing gasmodels should be defined on the following type:","category":"page"},{"location":"model/#","page":"GasModel","title":"GasModel","text":"GenericGasModel","category":"page"},{"location":"model/#GasModels.GenericGasModel","page":"GasModel","title":"GasModels.GenericGasModel","text":"mutable struct GenericGasModel{T<:AbstractGasFormulation}\n    model::JuMP.Model\n    data::Dict{String,Any}\n    setting::Dict{String,Any}\n    solution::Dict{String,Any}\n    var::Dict{Symbol,Any} # model variable lookup\n    constraint::Dict{Symbol, Dict{Any, ConstraintRef}} # model constraint lookup\n    ref::Dict{Symbol,Any} # reference data\n    ext::Dict{Symbol,Any} # user extensions\nend\n\nwhere\n\ndata is the original data, usually from reading in a .json file,\nsetting usually looks something like Dict(\"output\" => Dict(\"flows\" => true)), and\nref is a place to store commonly used pre-computed data from of the data dictionary,   primarily for converting data-types, filtering out deactivated components, and storing   system-wide values that need to be computed globally. See build_ref(data) for further details.\n\nMethods on GenericGasModel for defining variables and adding constraints should\n\nwork with the ref dict, rather than the original data dict,\nadd them to model::JuMP.Model, and\nfollow the conventions for variable and constraint names.\n\n\n\n\n\n","category":"type"},{"location":"model/#","page":"GasModel","title":"GasModel","text":"which utilizes the following (internal) functions:","category":"page"},{"location":"model/#","page":"GasModel","title":"GasModel","text":"build_ref","category":"page"},{"location":"model/#GasModels.build_ref","page":"GasModel","title":"GasModels.build_ref","text":"Returns a dict that stores commonly used pre-computed data from of the data dictionary, primarily for converting data-types, filtering out deactivated components, and storing system-wide values that need to be computed globally.\n\nSome of the common keys include:\n\n:max_mass_flow (see max_mass_flow(data)),\n:connection – the set of connections that are active in the network (based on the component status values),\n:pipe – the set of connections that are pipes (based on the component type values),\n:short_pipe – the set of connections that are short pipes (based on the component type values),\n:compressor – the set of connections that are compressors (based on the component type values),\n:valve – the set of connections that are valves (based on the component type values),\n:control_valve – the set of connections that are control valves (based on the component type values),\n:resistor – the set of connections that are resistors (based on the component type values),\n:parallel_connections – the set of all existing connections between junction pairs (i,j),\n:all_parallel_connections – the set of all existing and new connections between junction pairs (i,j),\n:junction_connections – the set of all existing connections of junction i,\n:junction_ne_connections – the set of all new connections of junction i,\n:junction_consumers – the mapping Dict(i => [consumer[\"ql_junc\"] for (i,consumer) in ref[:consumer]]).\n:junction_producers – the mapping Dict(i => [producer[\"qg_junc\"] for (i,producer) in ref[:producer]]).\n:degree – the degree of junction i using existing connections (see degree_ref!)),\ndegree_ne – the degree of junction i using existing and new connections (see degree_ne_ref!)),\n:pd_min,:pd_max – the max and min square pressure difference (see calc_pd_bounds_sqr)),\n\n\n\n\n\n","category":"function"},{"location":"specifications/#Problem-Specifications-1","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications/#Gas-Flow-(GF)-1","page":"Problem Specifications","title":"Gas Flow (GF)","text":"","category":"section"},{"location":"specifications/#Variables-1","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_pressure_sqr(gm)\nvariable_flow(gm)\nvariable_valve_operation(gm)","category":"page"},{"location":"specifications/#Constraints-1","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"for i in ids(gm, :junction)\n    constraint_mass_flow_balance(gm, i)\nend\n\nfor i in ids(gm, :pipe)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm, :resistor)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm, :short_pipe)\n  constraint_short_pipe_pressure(gm, i)\n  constraint_short_pipe_mass_flow(gm, i)\nend\n\nfor i in ids(gm, :compressor)\n    constraint_compressor_mass_flow(gm, i)\n    constraint_compressor_ratio(gm, i)\nend\n\nfor i in ids(gm, :valve)\n  constraint_on_off_valve_mass_flow(gm, i)\n  constraint_on_off_valve_pressure(gm, i)\nend\n\nfor i in ids(gm, :control_valve)\n  constraint_on_off_control_valve_mass_flow(gm, i)\n  constraint_on_off_control_valve_pressure(gm, i)\nend","category":"page"},{"location":"specifications/#Maximum-Load-(LS)-1","page":"Problem Specifications","title":"Maximum Load (LS)","text":"","category":"section"},{"location":"specifications/#Variables-2","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_flow(gm)\nvariable_pressure_sqr(gm)\nvariable_valve_operation(gm)\nvariable_load_mass_flow(gm)\nvariable_production_mass_flow(gm)","category":"page"},{"location":"specifications/#Objective-1","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"objective_max_load(gm)","category":"page"},{"location":"specifications/#Constraints-2","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"for i in ids(gm,:pipe)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm,:resistor)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm, :junction)\n    constraint_mass_flow_balance_ls(gm, i)\nend\n\nfor i in ids(gm, :short_pipe)\n  constraint_short_pipe_pressure(gm, i)\n  constraint_short_pipe_mass_flow(gm, i)\nend\n\nfor i in ids(gm, :compressor)\n    constraint_compressor_mass_flow(gm, i)\n    constraint_compressor_ratio(gm, i)\nend\n\nfor i in ids(gm, :valve)\n  constraint_on_off_valve_mass_flow(gm, i)\n  constraint_on_off_valve_pressure(gm, i)\nend\n\nfor i in ids(gm, :control_valve)\n  constraint_on_off_control_valve_mass_flow(gm, i)\n  constraint_on_off_control_valve_pressure(gm, i)\nend","category":"page"},{"location":"specifications/#Expansion-Planning-(NE)-1","page":"Problem Specifications","title":"Expansion Planning (NE)","text":"","category":"section"},{"location":"specifications/#Variables-3","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_pressure_sqr(gm)\nvariable_flow(gm)\nvariable_flow_ne(gm)\nvariable_valve_operation(gm)\nvariable_pipe_ne(gm)\nvariable_compressor_ne(gm)","category":"page"},{"location":"specifications/#Objective-2","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_ne_cost(gm)","category":"page"},{"location":"specifications/#Constraints-3","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"for i in ids(gm, :junction)\n    constraint_mass_flow_balance_ne(gm, i)\nend\n\nfor i in ids(gm,:pipe)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm,:resistor)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm,:ne_pipe)\n    constraint_pipe_pressure(gm, i)\n    constraint_pipe_mass_flow(gm,i)\n    constraint_weymouth(gm,i)\nend\n\nfor i in ids(gm, :short_pipe)\n  constraint_short_pipe_pressure(gm, i)\n  constraint_short_pipe_mass_flow(gm, i)\nend\n\nfor i in ids(gm, :compressor)\n    constraint_compressor_mass_flow(gm, i)\n    constraint_compressor_ratio(gm, i)\nend\n\nfor i in ids(gm, :ne_compressor)\n    constraint_compressor_ratios_ne(gm, i)\n    constraint_compressor_ne(gm, i)\n    constraint_compressor_mass_flow_ne(gm, i)\nend\n\nfor i in ids(gm, :valve)\n  constraint_on_off_valve_mass_flow(gm, i)\n  constraint_on_off_valve_pressure(gm, i)\nend\n\nfor i in ids(gm, :control_valve)\n  constraint_on_off_control_valve_mass_flow(gm, i)\n  constraint_on_off_control_valve_pressure(gm, i)\nend","category":"page"},{"location":"result-data/#GasModels-Result-Data-Format-1","page":"Result Data Format","title":"GasModels Result Data Format","text":"","category":"section"},{"location":"result-data/#The-Result-Data-Dictionary-1","page":"Result Data Format","title":"The Result Data Dictionary","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"GasModels utilizes a dictionary to organize the results of a run command. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The data dictionary organization is designed to be consistent with the GasModels The Network Data Dictionary.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"At the top level the results data dictionary is structured as follows:","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"optimizer\":<string>,    # name of the Julia class used to solve the model\n\"status\":<julia symbol>, # solver status at termination\n\"solve_time\":<float>,    # reported solve time (seconds)\n\"objective\":<float>,     # the final evaluation of the objective function\n\"objective_lb\":<float>,  # the final lower bound of the objective function (if available)\n\"machine\":{...},         # computer hardware information (details below)\n\"data\":{...},            # test case information (details below)\n\"solution\":{...}         # complete solution information (details below)\n}","category":"page"},{"location":"result-data/#Machine-Data-1","page":"Result Data Format","title":"Machine Data","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"This object provides basic information about the hardware that was used when the run command was called.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"cpu\":<string>,    # CPU product name\n\"memory\":<string>  # the amount of system memory (units given)\n}","category":"page"},{"location":"result-data/#Case-Data-1","page":"Result Data Format","title":"Case Data","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"This object provides basic information about the network cases that was used when the run command was called.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"name\":<string>,      # the name from the network data structure\n\"junction_count\":<int>,    # the number of nodes in the network data structure\n\"pipe_count\":<int>,    # the number of pipe edges in the network data structure\n\"valve_count\":<int>,    # the number of valve edges in the network data structure\n\"resistor_count\":<int>,    # the number of resistor edges in the network data structure\n\"control_valve_count\":<int>,    # the number of valve edges in the network data structure\n\"short_pipe_count\":<int>,    # the number of short pipe edges in the network data structure\n\"compressor_count\":<int>  # the number of compressor edges in the network data structure\n}","category":"page"},{"location":"result-data/#Solution-Data-1","page":"Result Data Format","title":"Solution Data","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"The solution object provides detailed information about the solution produced by the run command.  The solution is organized similarly to The Network Data Dictionary with the same nested structure and parameter names, when available.  A network solution most often only includes a small subset of the data included in the network data.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"For example the data for a junction, data[\"junction\"][\"1\"] is structured as follows,","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"pmin\": 0.0,\n\"pmax\": 1.0,\n...\n}","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"A solution specifying a pressure for the same case, i.e. result[\"solution\"][\"junction\"][\"1\"], would result in,","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"p\":0.55,\n}","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"Because the data dictionary and the solution dictionary have the same structure InfrastructureModels update_data! helper function can be used to update a data dictionary with the values from a solution as follows,","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"InfrastructureModels.update_data!(data, result[\"solution\"])","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"By default, all results are reported in per-unit (non-dimenionalized). Below are common outputs of implemented optimization models","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"junction\":{\n    \"1\":{\n      \"p\": <float>,      # pressure. Non-dimensional quantity. Multiply by baseP to get pascals\n      \"psqr\": <float>,   # pressure squared. Non-dimensional quantity. Multiply by baseP^2 to get pascals^2      \n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"consumer\":{\n    \"1\":{\n      \"fl\": <float>,  # variable mass flow consumed. Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s.\n      \"ql\": <float>,  # the varible volumetric gas demand at standard density. Non-dimensional quantity. Multiply by baseQ to get m^3/s.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"producer\":{\n    \"1\":{\n      \"fg\": <float>,  # variable mass flow produced. Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s.\n      \"qg\": <float>,  # the varible volumetric gas produced at standard density. Non-dimensional quantity. Multiply by baseQ to get m^3/s.        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"pipe\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the pipe.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"resistor\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the resistor.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"compressor\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the compressor.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n      \"ratio\": <float>,             # multiplicative compression ratio\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"control_valve\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the compressor.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n      \"v\": <int>,                   # 1 if valve is open. 0 otherwise      \n      \"ratio\": <float>,             # multiplicative decompression ratio\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"valve\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the compressor.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n      \"v\": <int>,                   # 1 if valve is open. 0 otherwise      \n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"short_pipe\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the compressor.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n      \"v\": <int>,                   # 1 if valve is open. 0 otherwise      \n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"ne_pipe\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the pipe.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n      \"built\": <float>,          # 1 if the pipe was built. 0 otherwise.\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"ne_compressor\":{\n    \"1\":{\n      \"f\": <float>,                 # mass flow through the pipe.  Non-dimensional quantity. Multiply by baseQ/standard_density to get kg/s. Mass flux is obtained through division of the cross-sectional area (A) of the pipe. A= (pi*diameter^2)/4\n      \"yp\": <int>,                  # 1 if flux flows from f_junction. 0 otherwise\n      \"yn\": <int>,                  # 1 if flux flows from t_junction. 0 otherwise\n      \"ratio\": <float>,             # multiplicative compression ratio\n      \"built\": <float>,          # 1 if compressor was built. 0 otherwise.      \n        ...\n    },\n    \"2\":{...},\n    ...\n}\n}","category":"page"},{"location":"formulations/#Network-Formulations-1","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/#Type-Hierarchy-1","page":"Network Formulations","title":"Type Hierarchy","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"We begin with the top of the hierarchy, where we can distinguish between gas flow models. There are currently five formulations supported in GasModels. Two full non convex formulations and three relaxations.","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"AbstractNLPForm <: AbstractGasFormulation\nAbstractMINLPForm <: AbstractGasFormulation\nAbstractMISOCPForm <: AbstractGasFormulation\nAbstractMIPForm <: AbstractGasFormulation\nAbstractLPForm <: AbstractGasFormulation","category":"page"},{"location":"formulations/#Gas-Models-1","page":"Network Formulations","title":"Gas Models","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Each of these forms can be used as the type parameter for a GasModel, i.e.:","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"NLPGasModel = GenericGasModel(StandardNLPForm)\nMINLPGasModel = GenericGasModel(StandardMINLPForm)\nMISOCPGasModel = GenericGasModel(StandardMISOCPForm)\nMIPGasModel = GenericGasModel(StandardMIPForm)\nLPGasModel = GenericGasModel(StandardLPForm)","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"For details on GenericGasModel, see the section on Gas Model.","category":"page"},{"location":"formulations/#User-Defined-Abstractions-1","page":"Network Formulations","title":"User-Defined Abstractions","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"The user-defined abstractions begin from a root abstract like the AbstractGasFormulation abstract type, i.e.","category":"page"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"AbstractMyFooForm <: AbstractGasFormulation\n\nStandardMyFooForm <: AbstractFooForm\nFooGasModel = GenericGasModel{StandardFooForm}","category":"page"},{"location":"formulations/#NLP-1","page":"Network Formulations","title":"NLP","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Modules = [GasModels]\nPages   = [\"form/nlp.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"formulations/#GasModels.constraint_compressor_ratios-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios","text":"enforces pressure changes bounds that obey compression ratios for an undirected compressor. \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_ne","text":"constraints on pressure drop across a compressor \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_control_valve_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_control_valve_pressure","text":"constraints on pressure drop across control valves that are undirected \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth","text":"Weymouth equation with absolute value \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_directed","text":"Weymouth equation with one way direction\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne","text":"Weymouth equation for an undirected expansion pipe \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractNLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne_directed","text":"Weymouth equation for directed expansion pipes\n\n\n\n\n\n","category":"method"},{"location":"formulations/#MINLP-1","page":"Network Formulations","title":"MINLP","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Modules = [GasModels]\nPages   = [\"form/mi/minlp.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"formulations/#GasModels.constraint_weymouth-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMINLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth","text":"Weymouth equation with discrete direction variables \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMINLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_directed","text":"Weymouth equation with one way direction\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMINLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne","text":"Weymouth equation for an undirected expansion pipe \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMINLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne_directed","text":"Weymouth equation for directed expansion pipes\n\n\n\n\n\n","category":"method"},{"location":"formulations/#MISOCP-1","page":"Network Formulations","title":"MISOCP","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Modules = [GasModels]\nPages   = [\"form/mi/misocp.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"formulations/#GasModels.constraint_weymouth-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMISOCPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth","text":"Weymouth equation for an undirected pipe \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMISOCPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_directed","text":"Weymouth equation with a pipe with one way flow\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMISOCPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne","text":"Weymouth equation for an undirected expansion pipe\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMISOCPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne_directed","text":"Weymouth equation for expansion pipes with undirected expansion pipes\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.variable_mass_flow-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractMISOCPForm","page":"Network Formulations","title":"GasModels.variable_mass_flow","text":"\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.variable_mass_flow_ne-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractMISOCPForm","page":"Network Formulations","title":"GasModels.variable_mass_flow_ne","text":"\n\n\n\n","category":"method"},{"location":"formulations/#MIP-1","page":"Network Formulations","title":"MIP","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Modules = [GasModels]\nPages   = [\"form/mip.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"formulations/#GasModels.constraint_compressor_ratios-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios","text":"Constraint: Compressor ratio constraints on pressure differentials–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_directed","text":"Constraint: Compressor ratio when the flow direction is constrained–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_ne","text":"Constraint: compressor ratios on a new compressor–not applicable for MIP models-not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_ne_directed","text":"Constraint: Pressure drop across an expansion compressor when direction is constrained-not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_control_valve_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_control_valve_pressure","text":"constraints on pressure drop across control valves that are undirected–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_control_valve_pressure_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_control_valve_pressure_directed","text":"Constraint: Pressure drop across a control valves when directions is constrained–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_valve_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_valve_pressure","text":"Constraint: Constraints on pressure drop across valves where the valve can open or close–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pipe_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_pipe_pressure","text":"Constraint: Constraints which define pressure drop across a pipe \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pipe_pressure_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_pipe_pressure_directed","text":"Constraint: constraints on pressure drop across where direction is constrained\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pipe_pressure_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_pipe_pressure_ne","text":"Constraint: constraints on pressure drop across an expansion pipe\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pressure_drop_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_pressure_drop_ne_directed","text":"Constraint: Pressure drop across an expansion pipe when direction is constrained–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_short_pipe_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_short_pipe_pressure","text":"Constraint: Constraint on pressure drop across a short pipe–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth","text":"Constraint: Weymouth equation–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_directed","text":"Constraint: Weymouth equation with one way direction–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne","text":"Constraint: Weymouth equation–not applicable for MIP models–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractMIPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne_directed","text":"Constraint: Weymouth equation–not applicable for MIP models–not applicable for MIP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#LP-1","page":"Network Formulations","title":"LP","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"Modules = [GasModels]\nPages   = [\"form/lp.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"formulations/#GasModels.constraint_compressor_ratios-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios","text":"Constraint: Compressor ratio constraints on pressure differentials–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_directed","text":"Constraint: Compressor ratio when the flow direction is constrained–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_ne","text":"Constraint: compressor ratios on a new compressor–not applicable for MIP models-not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_compressor_ratios_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_compressor_ratios_ne_directed","text":"Constraint: Pressure drop across an expansion compressor when direction is constrained-not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_control_valve_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_control_valve_pressure","text":"constraints on pressure drop across control valves that are undirected–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_control_valve_pressure_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_control_valve_pressure_directed","text":"Constraint: Pressure drop across a control valves when directions is constrained–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_on_off_valve_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_on_off_valve_pressure","text":"Constraint: Constraints on pressure drop across valves where the valve can open or close–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pipe_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_pipe_pressure","text":"Constraint: Constraints which define pressure drop across a pipe \n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pipe_pressure_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_pipe_pressure_directed","text":"Constraint: constraints on pressure drop across where direction is constrained\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pipe_pressure_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_pipe_pressure_ne","text":"Constraint: constraints on pressure drop across an expansion pipe\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_pressure_drop_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_pressure_drop_ne_directed","text":"Constraint: Pressure drop across an expansion pipe when direction is constrained–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_short_pipe_pressure-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_short_pipe_pressure","text":"Constraint: Constraint on pressure drop across a short pipe–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth","text":"Constraint: Weymouth equation–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_directed","text":"Constraint: Weymouth equation with one way direction–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne","text":"Constraint: Weymouth equation–not applicable for MIP models–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.constraint_weymouth_ne_directed-Union{Tuple{T}, Tuple{GenericGasModel{T},Int64,Any,Any,Any,Any,Any,Any}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.constraint_weymouth_ne_directed","text":"Constraint: Weymouth equation–not applicable for MIP models–not applicable for LP models\n\n\n\n\n\n","category":"method"},{"location":"formulations/#GasModels.variable_valve_operation-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractLPForm","page":"Network Formulations","title":"GasModels.variable_valve_operation","text":"continous relaxation of variables associated with operating valves \n\n\n\n\n\n","category":"method"},{"location":"variables/#Variables-1","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"variables/#","page":"Variables","title":"Variables","text":"We provide the following methods to provide a compositional approach for defining common variables used in gas flow models. These methods should always be defined over \"GenericGasModel\". ","category":"page"},{"location":"variables/#","page":"Variables","title":"Variables","text":"Modules = [GasModels]\nPages   = [\"core/variable.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"variables/#GasModels.getstart","page":"Variables","title":"GasModels.getstart","text":"extracts the start value\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_compressor_ne","page":"Variables","title":"GasModels.variable_compressor_ne","text":"variables associated with building compressors \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_connection_direction-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractGasFormulation","page":"Variables","title":"GasModels.variable_connection_direction","text":"variables associated with direction of flow on the connections. yp = 1 imples flow goes from fjunction to tjunction. yn = 1 imples flow goes from tjunction to fjunction \n\n\n\n\n\n","category":"method"},{"location":"variables/#GasModels.variable_connection_direction_ne-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractGasFormulation","page":"Variables","title":"GasModels.variable_connection_direction_ne","text":"variables associated with direction of flow on the connections yp = 1 imples flow goes from fjunction to tjunction. yn = 1 imples flow goes from tjunction to fjunction \n\n\n\n\n\n","category":"method"},{"location":"variables/#GasModels.variable_flow","page":"Variables","title":"GasModels.variable_flow","text":"Variable Set: Define variables needed for modeling flow across connections\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_flow_directed","page":"Variables","title":"GasModels.variable_flow_directed","text":"Variable Set: Define variables needed for modeling flow across connections where some flows are directionally constrained\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_flow_ne","page":"Variables","title":"GasModels.variable_flow_ne","text":"Variable Set: Define variables needed for modeling flow across connections that are expansions\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_flow_ne_directed","page":"Variables","title":"GasModels.variable_flow_ne_directed","text":"Variable Set: Define variables needed for modeling flow across connections that are expansions and some flows are directionally constrained\n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_load_mass_flow","page":"Variables","title":"GasModels.variable_load_mass_flow","text":"variables associated with demand \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_mass_flow","page":"Variables","title":"GasModels.variable_mass_flow","text":"variables associated with mass flow \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_mass_flow_ne","page":"Variables","title":"GasModels.variable_mass_flow_ne","text":"variables associated with mass flow in expansion planning \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_pipe_ne","page":"Variables","title":"GasModels.variable_pipe_ne","text":"variables associated with building pipes \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_pressure_sqr-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractGasFormulation","page":"Variables","title":"GasModels.variable_pressure_sqr","text":"variables associated with pressure squared \n\n\n\n\n\n","category":"method"},{"location":"variables/#GasModels.variable_production_mass_flow","page":"Variables","title":"GasModels.variable_production_mass_flow","text":"variables associated with production \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasModels.variable_valve_operation-Union{Tuple{GenericGasModel{T}}, Tuple{T}, Tuple{GenericGasModel{T},Int64}} where T<:GasModels.AbstractGasFormulation","page":"Variables","title":"GasModels.variable_valve_operation","text":"0-1 variables associated with operating valves \n\n\n\n\n\n","category":"method"},{"location":"objective/#Objective-1","page":"Objective","title":"Objective","text":"","category":"section"},{"location":"objective/#","page":"Objective","title":"Objective","text":"Modules = [GasModels]\nPages   = [\"core/objective.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"objective/#GasModels.objective_max_load","page":"Objective","title":"GasModels.objective_max_load","text":"function for maximizing load \n\n\n\n\n\n","category":"function"},{"location":"objective/#GasModels.objective_min_ne_cost","page":"Objective","title":"GasModels.objective_min_ne_cost","text":"function for costing expansion of pipes and compressors \n\n\n\n\n\n","category":"function"},{"location":"#GasModels.jl-Documentation-1","page":"Home","title":"GasModels.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = GasModels","category":"page"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"GasModels.jl is a Julia/JuMP package for Steady-State Gas Network Optimization. It provides utilities for parsing and modifying network data (see GasModels Network Data Format for details), and is designed to enable computational evaluation of emerging gas network formulations and algorithms in a common platform.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The code is engineered to decouple Problem Specifications (e.g. Gas Flow, Expansion Planning, ...) from Network Formulations (e.g. MINLP, MISOCP-relaxation, ...). This enables the definition of a wide variety of gas network formulations and their comparison on common problem specifications.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The latest stable release of GasModels will be installed using the Julia package manager with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"add GasModels","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"checkout GasModels","category":"page"},{"location":"#","page":"Home","title":"Home","text":"At least one solver is required for running GasModels.  The open-source solver Juniper is recommended and can be used to solve a wide variety of the problems and network formulations provided in GasModels.  The Juniper solver can be installed via the package manager with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"add Juniper","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"#","page":"Home","title":"Home","text":"test GasModels","category":"page"}]
}
